#define YYFILL_EOF END_OF_FILE
#define YYFILL_IO_ERROR IO_ERROR
#include "datascript/scanner/tokens.h"
#include "datascript/scanner/libscanner/libscanner.h"

scanstate* datascript_scanner_attach(scanstate *ss);


#define YYGETCONDITION() currentCondition
#define YYSETCONDITION(c) currentCondition = c
 
static enum YYCONDTYPE {
  yycCODE,
  yycSTRING,
  yycCPPCOMMENT,
  yycCCOMMENT,
  yycDOCCOMMENT	

} currentCondition;
 
static int scanner_start (scanstate *ss) 
{
   scanner_enter(ss); 
 
/*!re2c

EOF = [\000];
ascii                = [\x20-\x7e];
lower                = [a-z];
upper                = [A-Z];
digit                = [0-9];
hex                  = [0-9a-fA-F];
oct	                 = [0-7];
lowerdigit           = [a-z0-9];
upperdigit           = [A-Z0-9];
alpha                = [a-zA-Z];
alphadigit           = [a-zA-Z0-9];
any                  = [^];
ws                   = [ \t\v\f];
ast                  = "*"; 
new_line             = "\r\n" | "\n" | "\r";
atmosphere           = new_line+ | ws+ | EOF;
identifier_start     = [_a-zA-Z];
identifier           = identifier_start [_a-zA-Z0-9]* ; 
decimal_num          = [1-9] digit*;

<CODE> new_line      { scan_inc_line(ss);  goto yyc_CODE; }
<CODE> ws+           { return WHITESPACE; }
<CODE> ["]           { YYSETCONDITION(yycSTRING); goto yyc_STRING; }
<CODE> EOF           { return END_OF_FILE; }
<CODE> "."           { return DOT; }
<CODE> "int8"        { return INT8; }
<CODE> "int16"       { return INT16; }
<CODE> "int32"       { return INT32; }
<CODE> "int64"       { return INT64; }
<CODE> "uint8"       { return UINT8; }
<CODE> "uint16"      { return UINT16; }
<CODE> "uint32"      { return UINT32; }
<CODE> "uint64"      { return UINT64; }
<CODE> "bit"         { return BIT; }
<CODE> ":"           { return COLON; }
<CODE> ";"           { return SEMICOLON; }
<CODE> "="           { return EQ; }
<CODE> "=="          { return EQEQ; }
<CODE> "{"           { return LEFT_CURL_BRACKET; }
<CODE> "}"           { return RIGHT_CURL_BRACKET; }
<CODE> "["           { return LEFT_BRACKET; }
<CODE> "]"           { return RIGHT_BRACKET; }
<CODE> "("           { return LEFT_PAREN; }
<CODE> ")"           { return RIGHT_PAREN; }
<CODE> "union"       { return UNION; }
<CODE> "choice"      { return CHOICE; }
<CODE> "on"          { return ON; }
<CODE> "case"        { return CASE; }
<CODE> "if"          { return IF; }
<CODE> "function"    { return FUNCTION; }
<CODE> "align"       { return ALIGN;}
<CODE> "<"           { return LT;}
<CODE> "<="          { return LEQ;}
<CODE> ">"           { return GT;}
<CODE> ">="          { return GEQ;}
<CODE> "!="          { return NEQ;}
<CODE> "&&"          { return LOGIC_AND;}
<CODE> "||"          { return LOGIC_OR;}
<CODE> "!"           { return LOGIC_NOT;}
<CODE> "&"           { return AND;}
<CODE> "|"           { return OR;}
<CODE> "^"           { return XOR;}
<CODE> "*="          { return ASS_MUL;}
<CODE> "/="          { return ASS_DIV;}
<CODE> "%="          { return ASS_MOD;}
<CODE> "+="          { return ASS_PLUS;}
<CODE> "-="          { return ASS_MINUS;}
<CODE> "<<="         { return ASS_SHL;}
<CODE> ">>="         { return ASS_SHR;}
<CODE> "&="          { return ASS_AND;}
<CODE> "|="          { return ASS_OR;}
<CODE> "^="          { return ASS_XOR;}
<CODE> "+"           { return PLUS;}
<CODE> "-"           { return MINUS;}
<CODE> "~"           { return NOT;}
<CODE> "*"           { return MUL;}
<CODE> "/"           { return DIV;}
<CODE> "%"           { return MOD;}
<CODE> "<<"          { return SHL;}
<CODE> ">>"          { return SHR;}
<CODE> "sizeof"      { return SIZEOF;}
<CODE> "bitsizeof"   { return BITSIZEOF;}
<CODE> "lengthof"    { return LENGTHOF;}
<CODE> "is"          { return IS;}
<CODE> "sum"         { return SUM;}
<CODE> "?"           { return QUESTION;}
<CODE> "forall"      { return FORALL;}
<CODE> "package"     { return PACKAGE;}
<CODE> "import"      { return IMPORT;}
<CODE> identifier    { return ID; } 

<CODE> "0" [xX] hex+  { return HEX_NUMBER; }
<CODE> "0" [xX] hex+ / identifier_start { return UNKNOWN_LEXEME; }

<CODE> "0"  oct+      { return OCTAL_NUMBER; }
<CODE> "0"  oct+     / identifier_start { return UNKNOWN_LEXEME; } 

<CODE> [01]+ [bB]     { return BINARY_NUMBER; }
<CODE> [01]+ [bB]    / identifier_start { return UNKNOWN_LEXEME; } 

<CODE> decimal_num    { return DECIMAL_NUMBER; }
<CODE> decimal_num / identifier_start   { return UNKNOWN_LEXEME; }




<CODE> [^]           { return UNKNOWN_LEXEME; }

<CODE> "//"	     { YYSETCONDITION(yycCPPCOMMENT); goto yyc_CPPCOMMENT; }
<CODE> "/*" [^ast]   { YYSETCONDITION(yycCCOMMENT); goto yyc_CCOMMENT; }


<CPPCOMMENT> new_line  { scan_inc_line(ss); YYSETCONDITION(yycCODE); goto yyc_CODE; }
<CPPCOMMENT> EOF       { return END_OF_FILE; }
<CPPCOMMENT> [^]       { goto yyc_CPPCOMMENT; }

<CCOMMENT> new_line  { scan_inc_line(ss);  goto yyc_CCOMMENT; }
<CCOMMENT> EOF       { return END_OF_FILE; }
<CCOMMENT> [^]       { goto yyc_CCOMMENT; }
<CCOMMENT> "*/"      { scan_inc_line(ss); YYSETCONDITION(yycCODE); goto yyc_CODE; }
 
 
<STRING> "\\\""     { goto yyc_STRING; }
<STRING> ["]        { YYSETCONDITION(yycCODE); return STRING; }
<STRING> EOF        { return UNTERMINATED_STRING; }
<STRING> [^]        { goto yyc_STRING; }
*/
}



scanstate* datascript_scanner_attach(scanstate *ss)
{
	if(ss) 
	{
		ss->state = scanner_start;
		ss->line = 1;
	}

	return ss;
}


