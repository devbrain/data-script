#include "parser/tokens.h"
#include "parser/scanner_iface.h"

#define YYCTYPE char
#define YYGETCONDITION() currentCondition
#define YYSETCONDITION(c) currentCondition = c
#define YYFILL fill_buffer(buffer, lexeme)
 
static enum YYCONDTYPE {
  yycCODE,
  yycSTRING,
  yycCPPCOMMENT,
  yycCCOMMENT,
  yycDOCCOMMENT	

} currentCondition;
 
#define BUFFER_END buffer->end (buffer->user)

token_t next_token(input_buffer_t* buffer, lexeme_t* lexeme) 
{
    lexeme->start = lexeme->current;
 
/*!re2c
re2c:define:YYCURSOR = lexeme->current;
re2c:define:YYMARKER = lexeme->ptr;
re2c:yyfill:enable = 1;
re2c:indent:top = 1;
re2c:define:YYLIMIT = BUFFER_END;
re2c:yyfill:parameter = 0;

EOF = [\000];
ascii                = [\x20-\x7e];
lower                = [a-z];
upper                = [A-Z];
digit                = [0-9];
hex                  = [0-9a-fA-F];
oct	             = [0-7];
lowerdigit           = [a-z0-9];
upperdigit           = [A-Z0-9];
alpha                = [a-zA-Z];
alphadigit           = [a-zA-Z0-9];
any                  = [^];
ws                   = [ \t];
ast                  = "*"; 
new_line             = "\r\n" | "\n" | "\r";
 

<CODE> new_line      { lexeme->line_no++;  goto yyc_CODE; }
<CODE> ws            { goto yyc_CODE; }
<CODE> ["]           { YYSETCONDITION(yycSTRING); goto yyc_STRING; }
<CODE> EOF           { return eEND_OF_FILE; }
<CODE> "0" [xX] hex+ { return eHEX_NUMBER; }
<CODE> "0"  oct+     { return eOCTAL_NUMBER; }
<CODE> [01]+ [bB]    { return eBINARY_NUMBER; }
<CODE> [1-9] digit*  { return eDECIMAL_NUMBER; }
<CODE> "int8"        { return eINT8; }
<CODE> "int16"       { return eINT16; }
<CODE> "int32"       { return eINT32; }
<CODE> "int64"       { return eINT64; }
<CODE> "uint8"       { return eUINT8; }
<CODE> "uint16"      { return eUINT16; }
<CODE> "uint32"      { return eUINT32; }
<CODE> "uint64"      { return eUINT64; }
<CODE> "bit"         { return eBIT; }
<CODE> ":"           { return eCOLON; }
<CODE> ";"           { return eSEMICOLON; }
<CODE> "="           { return eEQ; }
<CODE> "=="          { return eEQEQ; }
<CODE> [_a-zA-Z][_a-zA-Z0-9]* { return eID; } 
<CODE> "{"           { return eLEFT_CURL_BRACKET; }
<CODE> "}"           { return eRIGHT_CURL_BRACKET; }
<CODE> "["           { return eLEFT_BRACKET; }
<CODE> "]"           { return eRIGHT_BRACKET; }
<CODE> "("           { return eLEFT_PAREN; }
<CODE> ")"           { return eRIGHT_PAREN; }
<CODE> "union"       { return eUNION; }
<CODE> "choice"      { return eCHOICE; }
<CODE> "on"          { return eON; }
<CODE> "case"        { return eCASE; }
<CODE> "if"          { return eIF; }
<CODE> "function"    { return eFUNCTION; }
<CODE> "align"       { return eALIGN;}
<CODE> "<"           { return eLT;}
<CODE> "<="          { return eLEQ;}
<CODE> ">"           { return eGT;}
<CODE> ">="          { return eGEQ;}
<CODE> "!="          { return eNEQ;}
<CODE> "&&"          { return eLOGIC_AND;}
<CODE> "||"          { return eLOGIC_OR;}
<CODE> "!"           { return eLOGIC_NOT;}
<CODE> "&"           { return eAND;}
<CODE> "|"           { return eOR;}
<CODE> "^"           { return eXOR;}
<CODE> "*="          { return eASS_MUL;}
<CODE> "/="          { return eASS_DIV;}
<CODE> "%="          { return eASS_MOD;}
<CODE> "+="          { return eASS_PLUS;}
<CODE> "-="          { return eASS_MINUS;}
<CODE> "<<="         { return eASS_SHL;}
<CODE> ">>="         { return eASS_SHR;}
<CODE> "&="          { return eASS_AND;}
<CODE> "|="          { return eASS_OR;}
<CODE> "^="          { return eASS_XOR;}
<CODE> "+"           { return ePLUS;}
<CODE> "-"           { return eMINUS;}
<CODE> "~"           { return eNOT;}
<CODE> "*"           { return eMUL;}
<CODE> "/"           { return eDIV;}
<CODE> "%"           { return eMOD;}
<CODE> "<<"          { return eSHL;}
<CODE> ">>"          { return eSHR;}
<CODE> "sizeof"      { return eSIZEOF;}
<CODE> "bitsizeof"   { return eBITSIZEOF;}
<CODE> "lengthof"    { return eLENGTHOF;}
<CODE> "is"          { return eIS;}
<CODE> "sum"         { return eSUM;}
<CODE> "?"           { return eQUESTION;}
<CODE> "forall"      { return eFORALL;}
<CODE> "package"     { return ePACKAGE;}
<CODE> "import"      { return eIMPORT;}
<CODE> [^]           { return eUNKNOWN_LEXEME; }

<CODE> "//"	     { YYSETCONDITION(yycCPPCOMMENT); goto yyc_CPPCOMMENT; }
<CODE> "/*" [^ast]   { YYSETCONDITION(yycCCOMMENT); goto yyc_CCOMMENT; }


<CPPCOMMENT> new_line  { lexeme->line_no++; YYSETCONDITION(yycCODE); goto yyc_CODE; }
<CPPCOMMENT> EOF       { return eEND_OF_FILE; }
<CPPCOMMENT> [^]       { goto yyc_CPPCOMMENT; }

<CCOMMENT> new_line  { lexeme->line_no++;  goto yyc_CCOMMENT; }
<CCOMMENT> EOF       { return eEND_OF_FILE; }
<CCOMMENT> [^]       { goto yyc_CCOMMENT; }
<CCOMMENT> "*/"      { lexeme->line_no++; YYSETCONDITION(yycCODE); goto yyc_CODE; }
 
 
<STRING> "\\\""     { goto yyc_STRING; }
<STRING> ["]        { YYSETCONDITION(yycCODE); return eSTRING; }
<STRING> EOF        { return eUNTERMINATED_STRING; }
<STRING> [^]        { goto yyc_STRING; }
*/
}

